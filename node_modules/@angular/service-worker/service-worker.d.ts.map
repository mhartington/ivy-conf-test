{"version":3,"file":"service-worker.d.ts","sources":["/Users/mhartington/GitHub/ionic-conference-app/node_modules/@angular/service-worker/service-worker.d.ts"],"sourcesContent":["/**\n * @license Angular v9.0.0-next.2\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { InjectionToken } from '@angular/core';\r\nimport { Injector } from '@angular/core';\r\nimport { ModuleWithProviders } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport declare class ServiceWorkerModule {\r\n    /**\r\n     * Register the given Angular Service Worker script.\r\n     *\r\n     * If `enabled` is set to `false` in the given options, the module will behave as if service\r\n     * workers are not supported by the browser, and the service worker will not be registered.\r\n     */\r\n    static register(script: string, opts?: SwRegistrationOptions): ModuleWithProviders<ServiceWorkerModule>;\r\n}\r\n\r\n/**\r\n * Subscribe and listen to push notifications from the Service Worker.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class SwPush {\r\n    private sw;\r\n    /**\r\n     * Emits the payloads of the received push notification messages.\r\n     */\r\n    readonly messages: Observable<object>;\r\n    /**\r\n     * Emits the payloads of the received push notification messages as well as the action the user\r\n     * interacted with. If no action was used the action property will be an empty string `''`.\r\n     *\r\n     * Note that the `notification` property is **not** a [Notification][Mozilla Notification] object\r\n     * but rather a\r\n     * [NotificationOptions](https://notifications.spec.whatwg.org/#dictdef-notificationoptions)\r\n     * object that also includes the `title` of the [Notification][Mozilla Notification] object.\r\n     *\r\n     * [Mozilla Notification]: https://developer.mozilla.org/en-US/docs/Web/API/Notification\r\n     */\r\n    readonly notificationClicks: Observable<{\r\n        action: string;\r\n        notification: NotificationOptions & {\r\n            title: string;\r\n        };\r\n    }>;\r\n    /**\r\n     * Emits the currently active\r\n     * [PushSubscription](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription)\r\n     * associated to the Service Worker registration or `null` if there is no subscription.\r\n     */\r\n    readonly subscription: Observable<PushSubscription | null>;\r\n    /**\r\n     * True if the Service Worker is enabled (supported by the browser and enabled via\r\n     * `ServiceWorkerModule`).\r\n     */\r\n    readonly isEnabled: boolean;\r\n    private pushManager;\r\n    private subscriptionChanges;\r\n    constructor(sw: ɵangular_packages_service_worker_service_worker_a);\r\n    requestSubscription(options: {\r\n        serverPublicKey: string;\r\n    }): Promise<PushSubscription>;\r\n    unsubscribe(): Promise<void>;\r\n    private decodeBase64;\r\n}\r\n\r\n/**\r\n * Token that can be used to provide options for `ServiceWorkerModule` outside of\r\n * `ServiceWorkerModule.register()`.\r\n *\r\n * You can use this token to define a provider that generates the registration options at runtime,\r\n * for example via a function call:\r\n *\r\n * {@example service-worker/registration-options/module.ts region=\"registration-options\"\r\n *     header=\"app.module.ts\"}\r\n *\r\n * @publicApi\r\n */\r\nexport declare abstract class SwRegistrationOptions {\r\n    /**\r\n     * Whether the ServiceWorker will be registered and the related services (such as `SwPush` and\r\n     * `SwUpdate`) will attempt to communicate and interact with it.\r\n     *\r\n     * Default: true\r\n     */\r\n    enabled?: boolean;\r\n    /**\r\n     * A URL that defines the ServiceWorker's registration scope; that is, what range of URLs it can\r\n     * control. It will be used when calling\r\n     * [ServiceWorkerContainer#register()](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register).\r\n     */\r\n    scope?: string;\r\n    /**\r\n     * Defines the ServiceWorker registration strategy, which determines when it will be registered\r\n     * with the browser.\r\n     *\r\n     * The default behavior of registering once the application stabilizes (i.e. as soon as there are\r\n     * no pending micro- and macro-tasks), is designed register the ServiceWorker as soon as possible\r\n     * but without affecting the application's first time load.\r\n     *\r\n     * Still, there might be cases where you want more control over when the ServiceWorker is\r\n     * registered (e.g. there might be a long-running timeout or polling interval, preventing the app\r\n     * to stabilize). The available option are:\r\n     *\r\n     * - `registerWhenStable`: Register as soon as the application stabilizes (no pending\r\n     *      micro-/macro-tasks).\r\n     * - `registerImmediately`: Register immediately.\r\n     * - `registerWithDelay:<timeout>`: Register with a delay of `<timeout>` milliseconds. For\r\n     *     example, use `registerWithDelay:5000` to register the ServiceWorker after 5 seconds. If\r\n     *     `<timeout>` is omitted, is defaults to `0`, which will register the ServiceWorker as soon\r\n     *     as possible but still asynchronously, once all pending micro-tasks are completed.\r\n     * - An [Observable](guide/observables) factory function: A function that returns an `Observable`.\r\n     *     The function will be used at runtime to obtain and subscribe to the `Observable` and the\r\n     *     ServiceWorker will be registered as soon as the first value is emitted.\r\n     *\r\n     * Default: 'registerWhenStable'\r\n     */\r\n    registrationStrategy?: string | (() => Observable<unknown>);\r\n}\r\n\r\n/**\r\n * Subscribe to update notifications from the Service Worker, trigger update\r\n * checks, and forcibly activate updates.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class SwUpdate {\r\n    private sw;\r\n    /**\r\n     * Emits an `UpdateAvailableEvent` event whenever a new app version is available.\r\n     */\r\n    readonly available: Observable<UpdateAvailableEvent>;\r\n    /**\r\n     * Emits an `UpdateActivatedEvent` event whenever the app has been updated to a new version.\r\n     */\r\n    readonly activated: Observable<UpdateActivatedEvent>;\r\n    /**\r\n     * True if the Service Worker is enabled (supported by the browser and enabled via\r\n     * `ServiceWorkerModule`).\r\n     */\r\n    readonly isEnabled: boolean;\r\n    constructor(sw: ɵangular_packages_service_worker_service_worker_a);\r\n    checkForUpdate(): Promise<void>;\r\n    activateUpdate(): Promise<void>;\r\n}\r\n\r\ndeclare interface TypedEvent {\r\n    type: string;\r\n}\r\n\r\n/**\r\n * An event emitted when a new version of the app has been downloaded and activated.\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface UpdateActivatedEvent {\r\n    type: 'UPDATE_ACTIVATED';\r\n    previous?: {\r\n        hash: string;\r\n        appData?: Object;\r\n    };\r\n    current: {\r\n        hash: string;\r\n        appData?: Object;\r\n    };\r\n}\r\n\r\n/**\r\n * An event emitted when a new version of the app is available.\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface UpdateAvailableEvent {\r\n    type: 'UPDATE_AVAILABLE';\r\n    current: {\r\n        hash: string;\r\n        appData?: Object;\r\n    };\r\n    available: {\r\n        hash: string;\r\n        appData?: Object;\r\n    };\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport declare class ɵangular_packages_service_worker_service_worker_a {\r\n    private serviceWorker;\r\n    readonly worker: Observable<ServiceWorker>;\r\n    readonly registration: Observable<ServiceWorkerRegistration>;\r\n    readonly events: Observable<TypedEvent>;\r\n    constructor(serviceWorker: ServiceWorkerContainer | undefined);\r\n    postMessage(action: string, payload: Object): Promise<void>;\r\n    postMessageWithStatus(type: string, payload: Object, nonce: number): Promise<void>;\r\n    generateNonce(): number;\r\n    eventsOfType<T extends TypedEvent>(type: T['type']): Observable<T>;\r\n    nextEventOfType<T extends TypedEvent>(type: T['type']): Observable<T>;\r\n    waitForStatus(nonce: number): Promise<void>;\r\n    readonly isEnabled: boolean;\r\n}\r\n\r\nexport declare const ɵangular_packages_service_worker_service_worker_b: InjectionToken<string>;\r\n\r\nexport declare function ɵangular_packages_service_worker_service_worker_c(injector: Injector, script: string, options: SwRegistrationOptions, platformId: string): Function;\r\n\r\nexport declare function ɵangular_packages_service_worker_service_worker_d(opts: SwRegistrationOptions, platformId: string): ɵangular_packages_service_worker_service_worker_a;\r\n\r\nexport { }\r\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAcA;;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}