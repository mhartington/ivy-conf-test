/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as tslib_1 from "tslib";
import { Compiler, Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
function unimplemented() {
    throw Error('unimplemented');
}
/**
 * Special interface to the compiler only used by testing
 *
 * @publicApi
 */
var TestingCompiler = /** @class */ (function (_super) {
    tslib_1.__extends(TestingCompiler, _super);
    function TestingCompiler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(TestingCompiler.prototype, "injector", {
        get: function () { throw unimplemented(); },
        enumerable: true,
        configurable: true
    });
    TestingCompiler.prototype.overrideModule = function (module, overrides) {
        throw unimplemented();
    };
    TestingCompiler.prototype.overrideDirective = function (directive, overrides) {
        throw unimplemented();
    };
    TestingCompiler.prototype.overrideComponent = function (component, overrides) {
        throw unimplemented();
    };
    TestingCompiler.prototype.overridePipe = function (directive, overrides) {
        throw unimplemented();
    };
    /**
     * Allows to pass the compile summary from AOT compilation to the JIT compiler,
     * so that it can use the code generated by AOT.
     */
    TestingCompiler.prototype.loadAotSummaries = function (summaries) { throw unimplemented(); };
    /**
     * Gets the component factory for the given component.
     * This assumes that the component has been compiled before calling this call using
     * `compileModuleAndAllComponents*`.
     */
    TestingCompiler.prototype.getComponentFactory = function (component) { throw unimplemented(); };
    /**
     * Returns the component type that is stored in the given error.
     * This can be used for errors created by compileModule...
     */
    TestingCompiler.prototype.getComponentFromError = function (error) { throw unimplemented(); };
TestingCompiler.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: TestingCompiler, factory: function TestingCompiler_Factory(t) { return ɵTestingCompiler_BaseFactory(t || TestingCompiler); }, providedIn: null });
const ɵTestingCompiler_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TestingCompiler);
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(TestingCompiler, [{
        type: Injectable
    }], null, { injector: [], overrideModule: [], overrideDirective: [], overrideComponent: [], overridePipe: [], loadAotSummaries: [], getComponentFactory: [], getComponentFromError: [] });
    return TestingCompiler;
}(Compiler));
export { TestingCompiler };
/**
 * A factory for creating a Compiler
 *
 * @publicApi
 */
var TestingCompilerFactory = /** @class */ (function () {
    function TestingCompilerFactory() {
    }
    return TestingCompilerFactory;
}());
export { TestingCompilerFactory };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9taGFydGluZ3Rvbi9HaXRIdWIvaW9uaWMtY29uZmVyZW5jZS1hcHAvbm9kZV9tb2R1bGVzL0Bhbmd1bGFyL2NvcmUvZXNtNS90ZXN0aW5nL3NyYy90ZXN0X2NvbXBpbGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBU0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrR0E2Q2tHOzs7Ozs4TEFHMUUiLCJmaWxlIjoidGVzdF9jb21waWxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBDb21waWxlciwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuZnVuY3Rpb24gdW5pbXBsZW1lbnRlZCgpIHtcbiAgICB0aHJvdyBFcnJvcigndW5pbXBsZW1lbnRlZCcpO1xufVxuLyoqXG4gKiBTcGVjaWFsIGludGVyZmFjZSB0byB0aGUgY29tcGlsZXIgb25seSB1c2VkIGJ5IHRlc3RpbmdcbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbnZhciBUZXN0aW5nQ29tcGlsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoVGVzdGluZ0NvbXBpbGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRlc3RpbmdDb21waWxlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGVzdGluZ0NvbXBpbGVyLnByb3RvdHlwZSwgXCJpbmplY3RvclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyB0aHJvdyB1bmltcGxlbWVudGVkKCk7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFRlc3RpbmdDb21waWxlci5wcm90b3R5cGUub3ZlcnJpZGVNb2R1bGUgPSBmdW5jdGlvbiAobW9kdWxlLCBvdmVycmlkZXMpIHtcbiAgICAgICAgdGhyb3cgdW5pbXBsZW1lbnRlZCgpO1xuICAgIH07XG4gICAgVGVzdGluZ0NvbXBpbGVyLnByb3RvdHlwZS5vdmVycmlkZURpcmVjdGl2ZSA9IGZ1bmN0aW9uIChkaXJlY3RpdmUsIG92ZXJyaWRlcykge1xuICAgICAgICB0aHJvdyB1bmltcGxlbWVudGVkKCk7XG4gICAgfTtcbiAgICBUZXN0aW5nQ29tcGlsZXIucHJvdG90eXBlLm92ZXJyaWRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKGNvbXBvbmVudCwgb3ZlcnJpZGVzKSB7XG4gICAgICAgIHRocm93IHVuaW1wbGVtZW50ZWQoKTtcbiAgICB9O1xuICAgIFRlc3RpbmdDb21waWxlci5wcm90b3R5cGUub3ZlcnJpZGVQaXBlID0gZnVuY3Rpb24gKGRpcmVjdGl2ZSwgb3ZlcnJpZGVzKSB7XG4gICAgICAgIHRocm93IHVuaW1wbGVtZW50ZWQoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFsbG93cyB0byBwYXNzIHRoZSBjb21waWxlIHN1bW1hcnkgZnJvbSBBT1QgY29tcGlsYXRpb24gdG8gdGhlIEpJVCBjb21waWxlcixcbiAgICAgKiBzbyB0aGF0IGl0IGNhbiB1c2UgdGhlIGNvZGUgZ2VuZXJhdGVkIGJ5IEFPVC5cbiAgICAgKi9cbiAgICBUZXN0aW5nQ29tcGlsZXIucHJvdG90eXBlLmxvYWRBb3RTdW1tYXJpZXMgPSBmdW5jdGlvbiAoc3VtbWFyaWVzKSB7IHRocm93IHVuaW1wbGVtZW50ZWQoKTsgfTtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjb21wb25lbnQgZmFjdG9yeSBmb3IgdGhlIGdpdmVuIGNvbXBvbmVudC5cbiAgICAgKiBUaGlzIGFzc3VtZXMgdGhhdCB0aGUgY29tcG9uZW50IGhhcyBiZWVuIGNvbXBpbGVkIGJlZm9yZSBjYWxsaW5nIHRoaXMgY2FsbCB1c2luZ1xuICAgICAqIGBjb21waWxlTW9kdWxlQW5kQWxsQ29tcG9uZW50cypgLlxuICAgICAqL1xuICAgIFRlc3RpbmdDb21waWxlci5wcm90b3R5cGUuZ2V0Q29tcG9uZW50RmFjdG9yeSA9IGZ1bmN0aW9uIChjb21wb25lbnQpIHsgdGhyb3cgdW5pbXBsZW1lbnRlZCgpOyB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvbXBvbmVudCB0eXBlIHRoYXQgaXMgc3RvcmVkIGluIHRoZSBnaXZlbiBlcnJvci5cbiAgICAgKiBUaGlzIGNhbiBiZSB1c2VkIGZvciBlcnJvcnMgY3JlYXRlZCBieSBjb21waWxlTW9kdWxlLi4uXG4gICAgICovXG4gICAgVGVzdGluZ0NvbXBpbGVyLnByb3RvdHlwZS5nZXRDb21wb25lbnRGcm9tRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHsgdGhyb3cgdW5pbXBsZW1lbnRlZCgpOyB9O1xuICAgIFRlc3RpbmdDb21waWxlciA9IHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgICAgIEluamVjdGFibGUoKVxuICAgIF0sIFRlc3RpbmdDb21waWxlcik7XG4gICAgcmV0dXJuIFRlc3RpbmdDb21waWxlcjtcbn0oQ29tcGlsZXIpKTtcbmV4cG9ydCB7IFRlc3RpbmdDb21waWxlciB9O1xuLyoqXG4gKiBBIGZhY3RvcnkgZm9yIGNyZWF0aW5nIGEgQ29tcGlsZXJcbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbnZhciBUZXN0aW5nQ29tcGlsZXJGYWN0b3J5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRlc3RpbmdDb21waWxlckZhY3RvcnkoKSB7XG4gICAgfVxuICAgIHJldHVybiBUZXN0aW5nQ29tcGlsZXJGYWN0b3J5O1xufSgpKTtcbmV4cG9ydCB7IFRlc3RpbmdDb21waWxlckZhY3RvcnkgfTtcbiJdfQ==